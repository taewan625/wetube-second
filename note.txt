NodeJs : js rum time ; browser 밖에서 작동하는 것 -> 다른 곳에서 사용 가능하게 됨.
npm은 js를 위한 패키지 매니저 이다. ; npm과 nodeJS는 같이 써야한다 상호작용 + node JS package download / npdeJs를 npm 없이 사용할 수 없다.
Npm: 천재들이 many small package를 만들어주는데 그것을 사용할 수 있는 것 npm can share the packages

Package 종류
express ; 

Yarn 페북에서 만든 것

Json: 프로그래머가 파일에 정보를 저장하기 위해 만든 방식 중 하나

* git repository connect 방법
1) folder 생성 -> vscode open -> vscode terminal git init 
2) make new repository in github.com
3) vscode terminal: git remote add origin github URL ex)git remote add origin https://github.com/taewan625/wetube-second
* package.json까지 만들기
1) npm init

package.json 기능
1) scripts; node index.js로 작동을 하는 것을 scripts라는 object를 만들어서 npm run variable을 하면 같은 기능으로 작동
scripts의 작동은 해당위치에 정확히 있어야 작동을 한다!! 아주 중요
2) dependencies; package(express)가 작동되려면 필요한 packages
3) devDependencies; for developer

npm i package: package-lock.json과 node_module 생성
 * node_module: every package(with install in npm) saved in node_module.
npm i: package.json 안의 dependencies를 알아서 설치해 준다.
    * package-lock: 이게 포함 되어있으면 version도 설정하는 것이여서 아주 안전 완벽하다.
npm i --save-dev package; --save-dev 가 package를 devDependencies로 구분 시켜준다.


babel
# node latest JS와 babel 수정
read latest js code
 *touch babel.config.json ; touch는 macOS, linux file 생성 명령어
1) npm install --save-dev @babel/core
2) npm install @babel/preset-env --save-dev ; latest JavaScript
3) touch babel.config.json

# nodemon; latest JS와 babel 수정 후 terminal 돌아오는 것 방지
1) npm i nodemon --save-dev ; nodemon이란 untilities를 설치
2) npm install @babel/core @babel/node --save-dev

# package.json scripts 수정
"nodemon으로 실시간으로 --exec안의 내용의 수정 확인 
babel-node index.js ; index.js라는 file을 node를 이용해서 browser 밖에서 js running
거기다가 babel을 통해서 latest JS code를 이용할 수 있게 수정

routes: server listening and moving URL
browser가 요청을 하면 서버에서 보내주는 것이여서 브라우저가 이동을 하는 것이 아니라 그자리에서 받는 역할을 하는 것이다

logger: 기록의 의미

morgan은 Node.js용 request logger middleware 이다.

morgan과 직접만든 middleware 차이점
정교성 : path, method res time 을 정교하게 보여준다